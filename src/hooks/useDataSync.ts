import { useCallback } from 'react';
import { volunteerService, shiftService, allocationService, captainService } from '../services/database';
import type { Volunteer, Shift, Captain } from '../types';
import toast from 'react-hot-toast';

// Dados seed do Root.tsx (importados para sincroniza√ß√£o)
const seedVolunteers: Volunteer[] = [
  { id: 'seed-1', name: 'Tiago Davila Jaques Da Silva', phone: '51998590784', congregation: 'Sul de sapiranga', city: 'Sapiranga', isTeamLeader: false, imageUrl: '', unavailableShifts: [] },
  { id: 'seed-2', name: 'Vitor Rodrigues', phone: '51994666754', congregation: 'Central', city: 'Cap√£o da Canoa', isTeamLeader: false, imageUrl: '', unavailableShifts: ['shift-27-tarde-patio-1', 'shift-27-manha-patio-5', 'shift-27-manha-patio-4', 'shift-27-tarde-portaria-2', 'shift-27-manha-portaria-5', 'shift-27-manha-portaria-4'] },
  // ... outros volunt√°rios (truncado para brevidade)
];

// Hook para sincroniza√ß√£o de dados
export function useDataSync() {
  
  // Verificar se √© a primeira execu√ß√£o
  const isFirstRun = useCallback(() => {
    return !localStorage.getItem('supabase_synced');
  }, []);

  // Marcar como sincronizado
  const markAsSynced = useCallback(() => {
    localStorage.setItem('supabase_synced', 'true');
    localStorage.setItem('supabase_sync_date', new Date().toISOString());
  }, []);

  // Sincronizar volunt√°rios
  const syncVolunteers = useCallback(async (volunteers: Volunteer[]) => {
    console.log('üîÑ Sincronizando volunt√°rios...');
    
    try {
      // Verificar se j√° existem volunt√°rios no Supabase
      const existing = await volunteerService.getAll();
      
      if (existing.length === 0) {
        // Inserir todos os volunt√°rios seed
        for (const volunteer of volunteers) {
          try {
            await volunteerService.create({
              name: volunteer.name,
              phone: volunteer.phone,
              congregation: volunteer.congregation,
              city: volunteer.city,
              isTeamLeader: volunteer.isTeamLeader || false,
              imageUrl: volunteer.imageUrl || '',
              unavailableShifts: volunteer.unavailableShifts || []
            });
          } catch (error) {
            // Se o volunt√°rio j√° existe (por ID), apenas continue
            console.warn(`Volunt√°rio ${volunteer.name} j√° existe, pulando...`);
          }
        }
        console.log('‚úÖ Volunt√°rios sincronizados com sucesso');
      } else {
        console.log('‚ÑπÔ∏è Volunt√°rios j√° existem no Supabase, pulando sincroniza√ß√£o');
      }
    } catch (error) {
      console.error('‚ùå Erro ao sincronizar volunt√°rios:', error);
      throw error;
    }
  }, []);

  // Sincronizar turnos
  const syncShifts = useCallback(async (shifts: Shift[]) => {
    console.log('üîÑ Sincronizando turnos...');
    
    try {
      // Verificar se j√° existem turnos no Supabase
      const existing = await shiftService.getAll();
      
      if (existing.length === 0) {
        // Inserir todos os turnos seed
        for (const shift of shifts) {
          try {
            await shiftService.create({
              date: shift.date,
              startTime: shift.startTime,
              endTime: shift.endTime,
              location: shift.location,
              requiredVolunteers: shift.requiredVolunteers,
              periodName: shift.periodName
            });
          } catch (error) {
            console.warn(`Turno ${shift.id} j√° existe, pulando...`);
          }
        }
        console.log('‚úÖ Turnos sincronizados com sucesso');
      } else {
        console.log('‚ÑπÔ∏è Turnos j√° existem no Supabase, pulando sincroniza√ß√£o');
      }
    } catch (error) {
      console.error('‚ùå Erro ao sincronizar turnos:', error);
      throw error;
    }
  }, []);

  // Sincronizar aloca√ß√µes
  const syncAllocations = useCallback(async (allocations: Record<string, string[]>) => {
    console.log('üîÑ Sincronizando aloca√ß√µes...');
    
    try {
      // Verificar se j√° existem aloca√ß√µes no Supabase
      const existing = await allocationService.getAll();
      
      if (Object.keys(existing).length === 0) {
        // Inserir todas as aloca√ß√µes seed
        await allocationService.replaceAll(allocations);
        console.log('‚úÖ Aloca√ß√µes sincronizadas com sucesso');
      } else {
        console.log('‚ÑπÔ∏è Aloca√ß√µes j√° existem no Supabase, pulando sincroniza√ß√£o');
      }
    } catch (error) {
      console.error('‚ùå Erro ao sincronizar aloca√ß√µes:', error);
      throw error;
    }
  }, []);

  // Sincronizar capit√£es
  const syncCaptains = useCallback(async (captains: Captain[]) => {
    console.log('üîÑ Sincronizando capit√£es...');
    
    try {
      // Verificar se j√° existem capit√£es no Supabase
      const existing = await captainService.getAll();
      
      if (existing.length === 0) {
        // Inserir todos os capit√£es seed
        for (const captain of captains) {
          try {
            await captainService.set(captain.date, captain.volunteerId, captain.location);
          } catch (error) {
            console.warn(`Capit√£o para ${captain.date} j√° existe, pulando...`);
          }
        }
        console.log('‚úÖ Capit√£es sincronizados com sucesso');
      } else {
        console.log('‚ÑπÔ∏è Capit√£es j√° existem no Supabase, pulando sincroniza√ß√£o');
      }
    } catch (error) {
      console.error('‚ùå Erro ao sincronizar capit√£es:', error);
      throw error;
    }
  }, []);

  // Sincroniza√ß√£o completa
  const syncAllData = useCallback(async (
    volunteers: Volunteer[],
    shifts: Shift[],
    allocations: Record<string, string[]>,
    captains: Captain[]
  ) => {
    if (!isFirstRun()) {
      console.log('‚ÑπÔ∏è Dados j√° foram sincronizados anteriormente');
      return;
    }

    console.log('üöÄ Iniciando sincroniza√ß√£o inicial com Supabase...');
    
    try {
      // Executar sincroniza√ß√µes em sequ√™ncia para evitar conflitos
      await syncVolunteers(volunteers);
      await syncShifts(shifts);
      await syncAllocations(allocations);
      await syncCaptains(captains);
      
      // Marcar como sincronizado
      markAsSynced();
      
      console.log('üéâ Sincroniza√ß√£o inicial conclu√≠da com sucesso!');
      toast.success('Dados iniciais sincronizados com o banco de dados!');
      
    } catch (error) {
      console.error('üí• Erro na sincroniza√ß√£o inicial:', error);
      toast.error('Erro na sincroniza√ß√£o inicial. Usando dados locais.');
      throw error;
    }
  }, [isFirstRun, syncVolunteers, syncShifts, syncAllocations, syncCaptains, markAsSynced]);

  // For√ßar nova sincroniza√ß√£o (√∫til para desenvolvimento)
  const forceSyncReset = useCallback(() => {
    localStorage.removeItem('supabase_synced');
    localStorage.removeItem('supabase_sync_date');
    console.log('üîÑ Sincroniza√ß√£o resetada. Pr√≥xima inicializa√ß√£o far√° nova sincroniza√ß√£o.');
  }, []);

  return {
    isFirstRun,
    syncAllData,
    forceSyncReset,
    syncVolunteers,
    syncShifts,
    syncAllocations,
    syncCaptains
  };
} 